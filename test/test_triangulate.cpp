
#include <cassert>
#include <geometry.hpp>
#include <algorithm/triangulate.hpp>
#include <algorithm/geometry_to_vector.hpp>

#include <iostream>

using namespace std;
using namespace rbox;

int main()
{
    std::vector<std::vector<point<double>>> poly1 = {
        { { 160.40671875,11.3976701817587 },{ 160.396875,11.3935345987524 },{ 160.39828125,11.4018057045896 },{ 160.39265625,11.4004272036667 },{ 160.38984375,11.3811274888866 },{ 160.3940625,11.3838846711709 },{ 160.3771875,11.3521754635814 },{ 160.33921875,11.3590690696413 },{ 160.35046875,11.3645838345287 },{ 160.3575,11.3645838345287 },{ 160.3575,11.3756130442004 },{ 160.29421875,11.3507967223837 },{ 160.2928125,11.3480392200086 },{ 160.28859375,11.3480392200086 },{ 160.295625,11.3287359579628 },{ 160.26328125,11.3080524456288 },{ 160.295625,11.1866791818427 },{ 160.31671875,11.1811610026871 },{ 160.318125,11.1770222993774 },{ 160.31390625,11.1687447155658 },{ 160.3125,11.1494294353899 },{ 160.2703125,11.1107950268865 },{ 160.2421875,11.1149346728405 },{ 160.23796875,11.0997556838987 },{ 160.25625,11.095615822671 },{ 160.21828125,11.0735355725517 },{ 160.21546875,11.0652550492086 },{ 160.2084375,11.0762956949617 },{ 160.20140625,11.0638749392263 },{ 160.19015625,11.0528338254202 },{ 160.18453125,11.0528338254202 },{ 160.183125,11.0486933005675 },{ 160.24640625,11.0583544343014 },{ 160.26890625,11.0555941428523 },{ 160.250625,11.0804358297701 },{ 160.28015625,11.0942358558913 },{ 160.295625,11.0845759059922 },{ 160.2928125,11.0721555015877 },{ 160.318125,11.0790557913426 },{ 160.31953125,11.0942358558913 },{ 160.33359375,11.1038954864431 },{ 160.34484375,11.0900959164515 },{ 160.35609375,11.1038954864431 },{ 160.363125,11.0969957829326 },{ 160.36453125,11.1052754075802 },{ 160.36171875,11.1121749153987 },{ 160.37578125,11.1149346728405 },{ 160.39828125,11.1080352302834 },{ 160.36734375,11.1756427184796 },{ 160.48125,11.1852996469051 },{ 160.48546875,11.1825405573266 },{ 160.5121875,11.1852996469051 },{ 160.5459375,11.1342522433585 },{ 160.56421875,11.1301128717933 },{ 160.55578125,11.1204541093718 },{ 160.56140625,11.1135547973836 },{ 160.588125,11.1314926688534 },{ 160.62328125,11.1121749153987 },{ 160.633125,11.1135547973836 },{ 160.6471875,11.1025155587833 },{ 160.64296875,11.1176944041669 },{ 160.63734375,11.1190742600349 },{ 160.62328125,11.1342522433585 },{ 160.62046875,11.128733068196 },{ 160.6078125,11.1480497233847 },{ 160.61203125,11.1480497233847 },{ 160.6134375,11.1563278971795 },{ 160.5909375,11.1425308098987 },{ 160.576875,11.1480497233847 },{ 160.57125,11.1549482179223 },{ 160.57125,11.1494294353899 },{ 160.57828125,11.1452902797332 },{ 160.57265625,11.1425308098987 },{ 160.57125,11.1494294353899 },{ 160.54875,11.1577075698847 },{ 160.554375,11.179781441482 },{ 160.54875,11.1770222993774 },{ 160.5628125,11.2087508469621 },{ 160.5234375,11.2059919808933 },{ 160.52203125,11.2032330885061 },{ 160.50515625,11.2184066708578 },{ 160.49390625,11.2032330885061 },{ 160.46296875,11.2046125379891 },{ 160.46296875,11.201853632445 },{ 160.4165625,11.2115096867066 },{ 160.41796875,11.2211654184183 },{ 160.39546875,11.2266828344767 },{ 160.35609375,11.2225447823168 },{ 160.35328125,11.2363380587922 },{ 160.3659375,11.2473722050633 },{ 160.351875,11.2915045605453 },{ 160.32375,11.2721974885629 },{ 160.32234375,11.2846093266964 },{ 160.35328125,11.3080524456288 },{ 160.351875,11.3149471157772 },{ 160.3659375,11.3204627323768 },{ 160.36171875,11.2997786224589 },{ 160.3828125,11.3011576095711 },{ 160.37859375,11.3080524456288 },{ 160.38140625,11.3094313929343 },{ 160.3828125,11.3011576095711 },{ 160.408125,11.3039155638972 },{ 160.408125,11.2997786224589 },{ 160.425,11.3094313929343 },{ 160.41234375,11.3411453475587 },{ 160.3996875,11.3301148056307 },{ 160.40953125,11.3700984927314 },{ 160.39265625,11.3618264654176 },{ 160.396875,11.3797488877286 },{ 160.4053125,11.3893989555911 },{ 160.40953125,11.3866418267411 },{ 160.419375,11.4004272036667 },{ 160.41515625,11.4059411672242 },{ 160.419375,11.4114550237293 },{ 160.425,11.412833471123 },{ 160.42359375,11.422482415387 },{ 160.40671875,11.3976701817587 } },
        { { 160.363125,11.1425308098987 },{ 160.3603125,11.1383915560672 },{ 160.3603125,11.1439105480884 },{ 160.363125,11.1425308098987 } },
        { { 160.35046875,11.1397713138873 },{ 160.34625,11.1383915560672 },{ 160.34203125,11.1480497233847 },{ 160.35046875,11.1397713138873 } },
    };
    triangulate<point<double>> tri1(poly1);
    tri1.run();
    assert(tri1.num_triangles() == 124);

    std::vector<linear_ring<double>> self_touching = {
        { { 280.35714,648.79075 },{ 286.78571,662.8979 },{ 263.28607,661.17871 },{ 262.31092,671.41548 },{ 250.53571,677.00504 },{ 250.53571,683.43361 },{ 256.42857,685.21933 },{ 297.14286,669.50504 },{ 289.28571,649.50504 },{ 285,631.6479 },{ 285,608.79075 },{ 292.85714,585.21932 },{ 306.42857,563.79075 },{ 323.57143,548.79075 },{ 339.28571,545.21932 },{ 357.85714,547.36218 },{ 375,550.21932 },{ 391.42857,568.07647 },{ 404.28571,588.79075 },{ 413.57143,612.36218 },{ 417.14286,628.07647 },{ 438.57143,619.1479 },{ 438.03572,618.96932 },{ 437.5,609.50504 },{ 426.96429,609.86218 },{ 424.64286,615.57647 },{ 419.82143,615.04075 },{ 420.35714,605.04075 },{ 428.39286,598.43361 },{ 437.85714,599.68361 },{ 443.57143,613.79075 },{ 450.71429,610.21933 },{ 431.42857,575.21932 },{ 405.71429,550.21932 },{ 372.85714,534.50504 },{ 349.28571,531.6479 },{ 346.42857,521.6479 },{ 346.42857,511.6479 },{ 350.71429,496.6479 },{ 367.85714,476.6479 },{ 377.14286,460.93361 },{ 385.71429,445.21932 },{ 388.57143,404.50504 },{ 360,352.36218 },{ 337.14286,325.93361 },{ 330.71429,334.50504 },{ 347.14286,354.50504 },{ 337.85714,370.21932 },{ 333.57143,359.50504 },{ 319.28571,353.07647 },{ 312.85714,366.6479 },{ 350.71429,387.36218 },{ 368.57143,408.07647 },{ 375.71429,431.6479 },{ 372.14286,454.50504 },{ 366.42857,462.36218 },{ 352.85714,462.36218 },{ 336.42857,456.6479 },{ 332.85714,438.79075 },{ 338.57143,423.79075 },{ 338.57143,411.6479 },{ 327.85714,405.93361 },{ 320.71429,407.36218 },{ 315.71429,423.07647 },{ 314.28571,440.21932 },{ 325,447.71932 },{ 324.82143,460.93361 },{ 317.85714,470.57647 },{ 304.28571,483.79075 },{ 287.14286,491.29075 },{ 263.03571,498.61218 },{ 251.60714,503.07647 },{ 251.25,533.61218 },{ 260.71429,533.61218 },{ 272.85714,528.43361 },{ 286.07143,518.61218 },{ 297.32143,508.25504 },{ 297.85714,507.36218 },{ 298.39286,506.46932 },{ 307.14286,496.6479 },{ 312.67857,491.6479 },{ 317.32143,503.07647 },{ 322.5,514.1479 },{ 325.53571,521.11218 },{ 327.14286,525.75504 },{ 326.96429,535.04075 },{ 311.78571,540.04075 },{ 291.07143,552.71932 },{ 274.82143,568.43361 },{ 259.10714,592.8979 },{ 254.28571,604.50504 },{ 251.07143,621.11218 },{ 250.53571,649.1479 },{ 268.1955,654.36208 } },
        { { 325,437 },{ 320,423 },{ 329,413 },{ 332,423 } },
        { { 320.72342,480 },{ 338.90617,465.96863 },{ 347.99754,480.61584 },{ 329.8148,510.41534 },{ 339.91632,480.11077 },{ 334.86556,478.09046 } },
    };
    polygon<double> poly(self_touching);
    const auto& src = geometry_to_vector(poly);

    triangulate<point<double>> tri(src);
    tri.run();
    assert(tri.num_triangles() == 106);


    return 0;
}